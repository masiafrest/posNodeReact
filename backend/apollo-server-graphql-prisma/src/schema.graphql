scalar Upload

type Query {
  items(
    filter: String
    skip: Int
    take: Int
    lte: Int
    categoria: String
  ): ItemQuery
  item(id: Int!): Item
  categorias(filter: String, skip: Int, take: Int): CategoriasQuery
  ubicaciones(filter: String, skip: Int, take: Int): UbicacionesQuery
  clientes(filter: String, skip: Int, take: Int): ClientesQuery
  ventas(filter: String, skip: Int, take: Int, isCredito: Boolean): VentasQuery
  devoluciones(filter: String, skip: Int, take: Int): DevolucionesQuery
  usuarios(filter: String, skip: Int, take: Int): UsuarioQuery
  modelos(filter: String, skip: Int, take: Int): ModelosQuery
  marcas(filter: String, skip: Int, take: Int): MarcaQuery
  caracteristicas(filter: String, skip: Int, take: Int): CaracteristicasQuery
  colors(filter: String, skip: Int, take: Int): ColorQuery
}

type ItemQuery {
  query: [Item]
  count: Int
}
type VentasQuery {
  query: [Venta]
  count: Int
}
type DevolucionesQuery {
  query: [Devolucion]
  count: Int
}

type CategoriasQuery {
  query: [Categoria]
  count: Int
}

type ModelosQuery {
  query: [Modelo]
  count: Int
}

type MarcaQuery {
  query: [Marca]
  count: Int
}

type CaracteristicasQuery {
  query: [Caracteristica]
  count: Int
}

type ColorQuery {
  query: [Color]
  count: Int
}

type ClientesQuery {
  query: [Cliente]
  count: Int
}

type UbicacionesQuery {
  query: [Ubicacion]
  count: Int
}

type UsuarioQuery {
  query: [Usuario]
  count: Int
}

type Mutation {
  signup(password: String!, nombre: String!, rol: Rol = VENDEDOR): AuthPayload
  login(nombre: String!, password: String!): AuthPayload

  postItem(
    barcode: Int
    qty: Int
    descripcion: String
    categorias: [String]
    ubicacion: IdInput
    precio: Float
    precioMin: Float
    images: [Upload]
    marca: String
    modelos: [String]
    color: String
    caracteristicas: [String]
  ): Item

  updateItem(
    id: Int!
    barcode: Int
    qty: Int
    descripcion: String
    categorias: [String]
    precio: Float
    precioMin: Float
    images: [Upload]
    marca: String
    modelos: [String]
    color: String
    caracteristicas: [String]
  ): Item

  delItem(id: Int!): Item

  postCategoria(nombre: String!): Categoria
  updateCategoria(id: Int, nombre: String): Categoria
  delCategoria(id: Int): Categoria

  postUbicacion(dirrecion: String!, tipo: String!): Ubicacion

  postCliente(nombre: String, telefono: String, dirrecion: String): Cliente
  updateCliente(
    id: Int
    nombre: String
    telefono: String
    dirrecion: String
  ): Cliente
  delCliente(id: Int): Cliente

  postUsuario(nombre: String, password: String, rol: Rol): Usuario
  updateUsuario(id: ID, nombre: String, password: String, rol: Rol): Usuario
  delUsuario(id: ID): Usuario

  postVenta(
    cliente: String
    credito: Boolean
    subTotal: Float
    tax: Float
    total: Float
    lineas: [VentaLineaInput]
  ): Venta
  updateVenta(id: ID, credito: Boolean): Venta
  delVenta(id: ID): Venta

  postDevolucion(clienteId: ID, lineas: [DevolucionLineaInput]): Devolucion

  postModelo(nombre: String!): Modelo
  updateModelo(id: Int, nombre: String): Modelo
  delModelo(id: Int): Modelo

  postCaracteristica(nombre: String!): Caracteristica
  updateCaracteristica(id: Int, nombre: String): Caracteristica
  delCaracteristica(id: Int): Caracteristica

  postMarca(nombre: String!): Marca
  updateMarca(id: Int, nombre: String): Marca
  delMarca(id: Int): Marca

  postColor(nombre: String!): Color
  updateColor(id: Int, nombre: String): Color
  delColor(id: Int): Color
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

input VentaLineaInput {
  id: ID
  tipo: String
  qty: Int
  precio: Float
  precioMin: Float
  descripcion: String
  custom: Boolean
}

input DevolucionLineaInput {
  id: ID
  tipo: String
  qty: Int
  precio: Float
  precioMin: Float
  descripcion: String
  razon: String
  esItemDevolvuelto: Boolean
}

input CategoriaInput {
  nombre: String
}

input IdInput {
  id: Int!
}

type AuthPayload {
  token: String
  usuario: Usuario
}

type Cliente {
  id: ID!
  nombre: String
  telefono: String
  dirrecion: String
  createdAt: String
}

type Usuario {
  id: ID!
  nombre: String
  createdAt: String
  rol: Rol
}

enum Rol {
  VENDEDOR
  ADMIN
}

type Item {
  id: ID!
  barcode: String
  image_url: String
  descripcion: String
  categorias: [Categoria!]!
  ubicacion: Ubicacion!
  precio: Precio!
  qty: Int
  createdAt: String
  deleted: Boolean
  lineaVenta: [VentaLinea]
  images: [File]
  marca: Marca
  modelos: [Modelo]
  color: Color
  caracteristicas: [Caracteristica]
}
type Marca {
  id: ID!
  nombre: String
  createdAt: String
  items: [Item!]
}
type Modelo {
  id: ID!
  nombre: String
  createdAt: String
  items: [Item!]
}
type Color {
  id: ID!
  nombre: String
  createdAt: String
  items: [Item!]
}
type Caracteristica {
  id: ID!
  nombre: String
  createdAt: String
  items: [Item!]
}

type Categoria {
  id: ID!
  nombre: String
  createdAt: String
  items: [Item!]
}

type Precio {
  id: ID!
  precio: Float
  precioMin: Float
  createdAt: String
}

type Ubicacion {
  id: ID!
  dirrecion: String
  tipo: String
  createdAt: String
}

type Venta {
  id: ID!
  usuarioNombre: String
  clienteNombre: String
  fecha: String
  credito: Boolean
  subTotal: Float
  tax: Float
  total: Float
  lineas: [VentaLinea]
}

type VentaLinea {
  ventaId: ID
  id: ID!
  item: Item
  itemId: Int
  qty: Int
  precio: Float
  descripcion: String
}

type Devolucion {
  id: ID!
  usuarioNombre: String
  clienteNombre: String
  fecha: String
  lineas: [DevolucionLinea]
}

type DevolucionLinea {
  devolucionId: ID
  id: ID!
  item: Item
  itemId: Int
  qty: Int
  descripcion: String
  razon: String
  esItemDevolvuelto: Boolean
}
