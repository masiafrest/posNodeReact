type Query {
  items(filter: String, skip: Int, take: Int): [Item]
  categorias: [Categoria]
  ubicaciones: [Ubicacion]
}

type Mutation {
  signup(
    email: String!
    password: String!
    nombre: String!
    telefono: String
    dirrecion: String
    rol: Rol = VENDEDOR
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload

  postItem(
    marca: String!
    modelo: String!
    barcode: Int
    color: String
    sku: String
    qty: Int
    descripcion: String
    categorias: [IdInput]
    precio: Float
    precioMin: Float
    ubicacion: IdInput
  ): Item
  postCategoria(nombre: String!): Categoria
  postUbicacion(dirrecion: String!, tipo: String!): Ubicacion

  updateItem(id: ID!): Item

  softDelItem(id: ID!): Item
}

input IdInput {
  id: Int!
}

type AuthPayload {
  token: String
  usuario: Usuario
}

type Cliente {
  id: ID!
  nombre: String
  email: String!
  telefono: String
  dirrecion: String
  createdAt: String
}

type Usuario {
  id: ID!
  nombre: String
  email: String!
  telefono: String
  dirrecion: String
  createdAt: String
  rol: Rol
}

enum Rol {
  VENDEDOR
  ADMIN
}

type Item {
  id: ID!
  marca: String!
  modelo: String!
  barcode: String
  image_url: String
  sku: String
  descripcion: String
  categorias: [Categoria!]!
  ubicacion: Ubicacion!
  precio: Precio!
  qty: Int
  createdAt: String
  deleted: Boolean
}

type Categoria {
  id: ID!
  itemId: Int
  nombre: String
  createdAt: String
  items: [Item!]
}

type Precio {
  id: ID!
  precio: Float
  precioMin: Float
  createdAt: String
}

type Ubicacion {
  id: ID!
  dirrecion: String
  tipo: String
  createdAt: String
}

type Venta {
  id: ID!
  usuarioId: Int
  clienteId: Int
  usuario: Usuario
  cliente: Cliente
  fecha: String
  credito: Boolean
  subTotal: Float
  tax: Float
  total: Float
}
