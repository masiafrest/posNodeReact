scalar Upload

type Query {
  items(filter: String, skip: Int, take: Int): [Item]
  item(id: Int!): Item
  categorias(filter: String, skip: Int, take: Int): [Categoria]
  ubicaciones: [Ubicacion]
  clientes(filter: String, skip: Int, take: Int): [Cliente]
  ventas: [Venta]
}

type Mutation {
  signup(password: String!, nombre: String!, rol: Rol = VENDEDOR): AuthPayload
  login(nombre: String!, password: String!): AuthPayload

  postItem(
    marca: String!
    modelo: String!
    barcode: Int
    sku: String
    qty: Int
    descripcion: String
    categorias: [IdInput]
    ubicacion: IdInput
    precio: Float
    precioMin: Float
    images: [ Upload ]
  ): Item

  updateItem(
    id: Int!
    marca: String
    modelo: String
    barcode: Int
    sku: String
    qty: Int
    descripcion: String
    categorias: [IdInput]
    precio: Float
    precioMin: Float
  ): Item
  delItem(id: Int!): Item

  postCategoria(nombre: String!): Categoria
  updateCategoria(id: Int, nombre: String): Categoria
  delCategoria(id: Int): Categoria

  postUbicacion(dirrecion: String!, tipo: String!): Ubicacion

  postCliente(nombre: String, telefono: String, dirrecion: String): Cliente
  updateCliente(
    id: Int
    nombre: String
    telefono: String
    dirrecion: String
  ): Cliente
  delCliente(id: Int): Cliente

  postVenta(
    clienteId: ID
    credito: Boolean
    subTotal: Float
    tax: Float
    total: Float
    lineas: [VentaLineaInput]
  ): Venta
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

input VentaLineaInput {
  id: ID
  tipo: String
  qty: Int
  precio: Float
  precioMin: Float
  descripcion: String
}

input IdInput {
  id: Int!
}

type AuthPayload {
  token: String
  usuario: Usuario
}

type Cliente {
  id: ID!
  nombre: String
  telefono: String
  dirrecion: String
  createdAt: String
}

type Usuario {
  id: ID!
  nombre: String
  createdAt: String
  rol: Rol
}

enum Rol {
  VENDEDOR
  ADMIN
}

type Item {
  id: ID!
  marca: String!
  modelo: String!
  barcode: String
  image_url: String
  sku: String
  descripcion: String
  categorias: [Categoria!]!
  ubicacion: Ubicacion!
  precio: Precio!
  qty: Int
  createdAt: String
  deleted: Boolean
  lineaVenta: [VentaLinea]
  images: [File]
}

type Categoria {
  id: ID!
  itemId: Int
  nombre: String
  createdAt: String
  items: [Item!]
}

type Precio {
  id: ID!
  precio: Float
  precioMin: Float
  createdAt: String
}

type Ubicacion {
  id: ID!
  dirrecion: String
  tipo: String
  createdAt: String
}

type Venta {
  id: ID!
  usuarioId: Int
  clienteId: Int
  usuario: Usuario
  cliente: Cliente
  fecha: String
  credito: Boolean
  subTotal: Float
  tax: Float
  total: Float
  lineas: [VentaLinea]
}

type VentaLinea {
  ventaId: ID
  id: ID!
  item: Item
  itemId: Int
  qty: Int
  precio: Float
  descripcion: String
}
